apply plugin:'java'
apply plugin:'java-library-distribution' //for distributions
apply plugin:'application' // possible to use variable like below
apply plugin:'com.github.johnrengelman.shadow'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.3'
    }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

mainClassName = 'io.rezoome.core.runtime.Runtime'
version = '1.0.1'

repositories {
    mavenCentral()
    maven() {
        url "https://maven.atlassian.com/3rdparty/"
    }
}

def ver = [	
    junit: '4.12',
    slf4j: '1.7.25',
    logback: '1.2.3',
    janino: '2.7.8',
    activemq: '5.15.0',    
    mybatis: '3.1.1',
    mysql:	'5.1.6',
    gson: '2.3.1',
    mysql: '5.1.6',
    oracle: '12.1.0.1-atlassian-hosted'
]


dependencies {
    compile "org.apache.activemq:activemq-client:${ver.activemq}"
    compile "org.apache.activemq:activemq-pool:${ver.activemq}"
    compile "org.mybatis:mybatis:${ver.mybatis}"
    compile "com.google.code.gson:gson:${ver.gson}"
    compile "mysql:mysql-connector-java:${ver.mysql}"
    compile "com.oracle:ojdbc6:${ver.oracle}"    
    compile "ch.qos.logback:logback-classic:${ver.logback}"
	compile "ch.qos.logback:logback-core:${ver.logback}"
	compile "org.slf4j:slf4j-api:${ver.slf4j}"
	compile "org.codehaus.janino:janino:${ver.janino}"	
	compile "org.danilopianini:gson-extras:0.2.1"
	compile "org.bouncycastle:bcprov-jdk15on:1.54"
	compile "org.bouncycastle:bcpkix-jdk15on:1.59"
	testCompile "junit:junit:${ver.junit}"
}

jar {
    finalizedBy shadowJar
//    manifest {
//        attributes 'Main-Class': mainClassName
//    }
	exclude "io/rezoome/core/runtime/*"
}

task testJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	//exclude('io/rezoome/core/runtime/*')
}

task mainJar (type : Jar) {
    manifest {
        attributes(
	        "Implementation-Title": "메인 jar",
	        "Implementation-Description": "메인 에이전트",
	        "Implementation-Version": version,
	        "Assembly-Date": new java.util.Date().toString(),
	        "Main-Class": mainClassName
        )
    }    
    archiveName = "agent.jar"
    dependsOn configurations.runtime
    from {
        configurations.compile.collect {it.isDirectory()? it: zipTree(it)}
    }
    //exclude "io/rezoome/core/runtime/*"
    //exclude "src/main/java/io/rezoome/external/**"
    //destinationDir = file("${buildDir}/")
    //duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task inhaJar (type : Jar) {
	manifest {
        attributes(
	        "Implementation-Title": "Inhwa University",
	        "Implementation-Description": "인하대학교 에이전트 파일",
	        "Implementation-Version": version,
	        "Assembly-Date": new java.util.Date().toString()
        )
    }
    archiveName = "inha.jar"
	from ("src/main/java")
	include "io/rezoome/external/inha/**"
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task mkJar (type : Jar) {
	manifest {
        attributes(
	        "Implementation-Title": "MK",
	        "Implementation-Description": "매경 에이전트 파일",
	        "Implementation-Version": version,
	        "Assembly-Date": new java.util.Date().toString()
        )
    }
    archiveName = "mk.jar"
	from ("src/main/java")
	include "io/rezoome/external/mk/**"
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task opicJar (type : Jar) {
	manifest {
        attributes(
	        "Implementation-Title": "Opic",
	        "Implementation-Description": "오픽 에이전트 파일",
	        "Implementation-Version": version,
	        "Assembly-Date": new java.util.Date().toString()
        )
    }
    archiveName = "opic.jar"
	from ("src/main/java")
	include "io/rezoome/external/opic/**"
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task buildJars {
	dependsOn 'clean'
	dependsOn 'inhaJar'
	dependsOn 'mkJar'
	dependsOn 'opicJar'
	//dependsOn 'mainJar'
	dependsOn 'build'
	tasks.findByName('inhaJar').mustRunAfter 'clean'
	tasks.findByName('mkJar').mustRunAfter 'clean'
	tasks.findByName('opicJar').mustRunAfter 'clean'
	//tasks.findByName('mainJar').mustRunAfter 'clean'
	tasks.findByName('build').mustRunAfter 'clean'
}
